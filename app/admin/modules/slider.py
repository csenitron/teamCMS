import json

from flask import flash, redirect, url_for, jsonify

from ...models.module import *
from ...models.modules.slider import *
from ...extensions import db


class SliderModule:
    """–õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–ª–∞–π–¥–µ—Ä–∞ –∏ —Å–ª–∞–π–¥–æ–≤"""

    @staticmethod
    def save_instance(module_id, form_data, instance_id=None):

        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–∞ –∏ –µ–≥–æ —Å–ª–∞–π–¥–æ–≤"""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º module_id
        if not module_id:
            flash("–û—à–∏–±–∫–∞: module_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω!", "danger")
            return redirect(url_for('admin.modules_list'))

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º ModuleInstance
        module_instance = ModuleInstance.query.get(instance_id) if instance_id else None

        # –°–æ–±–∏—Ä–∞–µ–º settings —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ slidebanner: —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑—É–µ–º —Ñ–ª–∞–≥–∏ UI –∏ –∞–≤—Ç–æ‚Äë–ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        settings = {
            'name': form_data.get("title"),
            'status': form_data.get("status") == "on",
            'show_arrows': form_data.get("show_arrows") == "on",
            'show_indicators': form_data.get("show_indicators") == "on",
            'auto_scroll': form_data.get("auto_scroll") == "on",
            # MultiDict –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç type, –Ω–æ –∑–¥–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ä—É—á–Ω—É—é
            'scroll_interval': int(form_data.get("scroll_interval") or 5000)
        }

        if not module_instance:
            module_instance = ModuleInstance(
                module_id=module_id,
                settings=json.dumps(settings),
                selected_template="default"
            )
            db.session.add(module_instance)
            db.session.flush()
        else:
            ModuleInstance.query.filter_by(id=module_instance.id).update({'settings': json.dumps(settings)})

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º SliderModuleInstance
        slider_instance = SliderModuleInstance.query.filter_by(module_instance_id=module_instance.id).first()

        if not slider_instance:
            slider_instance = SliderModuleInstance(
                module_instance_id=module_instance.id
            )
            db.session.add(slider_instance)
        else:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–ª–∞–π–¥—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —á–µ—Ä–µ–∑ ORM, —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª –∫–∞—Å–∫–∞–¥ –Ω–∞ –∫–Ω–æ–ø–∫–∏
            old_slides = SliderItem.query.filter_by(slider_id=slider_instance.id).all()
            for _s in old_slides:
                db.session.delete(_s)
            db.session.flush()
        slider_instance.title = form_data.get("title")
        slider_instance.width = form_data.get("width", type=int)
        slider_instance.transition_type = form_data.get("transition_type")
        slider_instance.status = settings['status']
        # –î—É–±–ª–∏—Ä—É–µ–º —Ñ–ª–∞–≥–∏ –≤ –∏–Ω—Å—Ç–∞–Ω—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–æ–≤
        slider_instance.show_arrows = settings['show_arrows']
        slider_instance.show_indicators = settings['show_indicators']

        db.session.commit()  # ‚úÖ –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–ª–∞–π–¥–æ–≤

        print("–§–æ—Ä–º–∞ –ø–µ—Ä–µ–¥–∞–ª–∞:", form_data)  # üî• –û—Ç–ª–∞–¥–∫–∞

        slides = {}
        for key, value in form_data.items():
            if key.startswith("slides["):
                slide_index = key.split("[")[1].split("]")[0]
                field_name = key.split("[")[2].split("]")[0]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è slide_index, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
                if slide_index not in slides:
                    slides[slide_index] = {}

                slides[slide_index][field_name] = value
        print(slides)
        for slide_index, slide_data in slides.items():  # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏ —Å–∞–º —Å–ª–æ–≤–∞—Ä—å
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_pc_id = None
            if slide_data.get("image_pc_id") and slide_data["image_pc_id"].strip():
                try:
                    image_pc_id = int(slide_data["image_pc_id"])
                except (ValueError, TypeError):
                    image_pc_id = None
            
            image_mobile_id = None
            if slide_data.get("image_mobile_id") and slide_data["image_mobile_id"].strip():
                try:
                    image_mobile_id = int(slide_data["image_mobile_id"])
                except (ValueError, TypeError):
                    image_mobile_id = None
            # –¶–≤–µ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞/–æ–ø–∏—Å–∞–Ω–∏—è
            title_color = slide_data.get("title_color") or None
            description_color = slide_data.get("description_color") or None

            slide = SliderItem(
                slider_id=slider_instance.id,
                image_pc_id=image_pc_id,
                image_mobile_id=image_mobile_id,
                title=slide_data.get("title", ""),
                description=slide_data.get("description", ""),
                title_color=title_color,
                description_color=description_color,
                link_text=None,
                link_url=None,
            )
            db.session.add(slide)
            db.session.flush()
            # –ö–Ω–æ–ø–∫–∏: slides[i][buttons][j][text|url|bg_color|text_color]
            for key, value in slide_data.items():
                # –ü—Ä–æ–π–¥—ë–º—Å—è –ø–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–º –∫–ª—é—á–∞–º —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω buttons
                # –ó–¥–µ—Å—å slide_data —É–∂–µ –ø–ª–æ—Å–∫–∏–π; –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ form_data,
                # –ø–æ—ç—Ç–æ–º—É –ª—É—á—à–µ –ø–∞—Ä—Å–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π form_data
                pass

        # –í—Ç–æ—Ä–∞—è —Ñ–∞–∑–∞: —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ form_data
        for key, value in form_data.items():
            if key.startswith('slides[') and '][buttons][' in key:
                # slides[<idx>][buttons][<bidx>][field]
                try:
                    parts = key.split('[')
                    sidx = parts[1].split(']')[0]
                    bidx = parts[3].split(']')[0]
                    field = parts[4].split(']')[0]
                except Exception:
                    continue
                # –Ω–∞–π–¥—ë–º —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π slide –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ sidx (–ø–æ –ø–æ—Ä—è–¥–∫—É –≤—Å—Ç–∞–≤–∫–∏)
                # —É–ø—Ä–æ—â—ë–Ω–Ω–æ: —Å–æ–±–µ—Ä—ë–º –∫—ç—à –∏–Ω–¥–µ–∫—Å–∞ -> id
        db.session.flush()
        slides_map = {str(i): s.id for i, s in enumerate(SliderItem.query.filter_by(slider_id=slider_instance.id).order_by(SliderItem.id).all())}
        buttons_tmp = {}
        for key, value in form_data.items():
            if key.startswith('slides[') and '][buttons][' in key:
                parts = key.split('[')
                sidx = parts[1].split(']')[0]
                bidx = parts[3].split(']')[0]
                field = parts[4].split(']')[0]
                buttons_tmp.setdefault((sidx, bidx), {})[field] = value
        for (sidx, bidx), bdata in buttons_tmp.items():
            slide_id = slides_map.get(str(sidx))
            if not slide_id:
                continue
            from ...models.modules.slider import SliderButton
            btn = SliderButton(
                slide_id=slide_id,
                text=bdata.get('text') or '',
                url=bdata.get('url') or None,
                bg_color=bdata.get('bg_color') or None,
                text_color=bdata.get('text_color') or None,
                order=int(bidx)
            )
            db.session.add(btn)
        db.session.commit()

        flash("–°–ª–∞–π–¥–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", "success")
        return redirect(url_for('admin.create_or_edit_module_instance', module_id=module_instance.module_id,
                                instance_id=module_instance.id))

    @staticmethod
    def load_instance_data(instance_id):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–ª–∞–π–¥–µ—Ä–∞.
        """

        if instance_id:
            module_instance = ModuleInstance.query.get_or_404(instance_id)
            slider_instance = SliderModuleInstance.query.filter_by(module_instance_id=instance_id).first()
            slides = SliderItem.query.filter_by(slider_id=slider_instance.id).all() if slider_instance else []
        else:
            module_instance = None
            slider_instance = None  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º `None`, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ —à–∞–±–ª–æ–Ω–µ
            slides = []

        return {
            "module_instance": module_instance,
            "slider": slider_instance,
            "slides": slides
        }

    @staticmethod
    def del_instance(module_id, instance_id):
        """
        –£–¥–∞–ª—è–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –¥–∞–Ω–Ω—ã–µ.
        """

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è
        module_instance = ModuleInstance.query.get(instance_id)
        if not module_instance:
            flash("–û—à–∏–±–∫–∞: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω!", "danger")
            return redirect(url_for('admin.modules_list'))

        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ SliderModuleInstance
        slider_instance = SliderModuleInstance.query.filter_by(module_instance_id=instance_id).first()
        if slider_instance:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–ª–∞–π–¥—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º —Å–ª–∞–π–¥–µ—Ä–æ–º
            SliderItem.query.filter_by(slider_id=slider_instance.id).delete()

            # –£–¥–∞–ª—è–µ–º —Å–∞–º —Å–ª–∞–π–¥–µ—Ä
            db.session.delete(slider_instance)

        # –£–¥–∞–ª—è–µ–º —Å–∞–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è
        db.session.delete(module_instance)

        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
        db.session.commit()

        flash("–≠–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", "success")
        return redirect(url_for('admin.modules_list'))

    @staticmethod
    def get_instance_data(module_instance):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è –ø–æ –æ–±—ä–µ–∫—Ç—É ModuleInstance.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        if not module_instance:
            return {
                'settings': {},
                'slider': None,
                'slides': []
            }

        # –ü–∞—Ä—Å–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ JSON
        settings = json.loads(module_instance.settings) if module_instance.settings else {}

        # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å–ª–∞–π–¥–µ—Ä –∏ —Å–ª–∞–π–¥—ã —á–µ—Ä–µ–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
        slider_instance = module_instance.slider_instance
        slides = slider_instance.slides if slider_instance else []

        return {
            'settings': settings,
            'slider': slider_instance,
            'slides': slides
        }


